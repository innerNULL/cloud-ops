---
AWSTemplateFormatVersion: '2010-09-09'
Description: Template to run stress-test for Jina on AWS
Parameters:
  EC2ImageIdParam:
    Type: String
    Default: ami-00831fc7c1e3ddc60
    Description: Enter Image ID. Default is for Ubuntu 20.04
  EC2InstanceTypeParam:
    Type: String
    Default: t2.micro
    Description: Enter instance type. Default is t2.micro.
  VolumeSizeParam:
    Type: Number
    Default: 20
    Description: Enter EBS volume size (type gp2). Default is 20GB.
  AvailabilityZoneParam:
    Type: String
    Default: us-west-1a
    Description: Enter Availability Zone for EC2. Default is us-west-1a
Resources:
  daemonVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'false'
      EnableDnsHostnames: 'false'
      InstanceTenancy: dedicated
      Tags:
       - Key: num-pods
         Value: 4

  crafterSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref daemonVPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone:
          Ref: AvailabilityZoneParam

  encoderSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref daemonVPC
        CidrBlock: 10.0.0.0/24
        AvailabilityZone:
          Ref: AvailabilityZoneParam

  indexerSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref daemonVPC
        CidrBlock: 10.0.2.0/24
        AvailabilityZone:
          Ref: AvailabilityZoneParam

  rankerSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref daemonVPC
        CidrBlock: 10.0.3.0/24
        AvailabilityZone:
          Ref: AvailabilityZoneParam

  flowSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref daemonVPC
        CidrBlock: 10.0.4.0/24
        AvailabilityZone:
          Ref: AvailabilityZoneParam

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        GroupName: daemon-sg
        VpcId:
           Ref: daemonVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  encoderInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: EC2ImageIdParam
      InstanceType:
        Ref: EC2InstanceTypeParam
#      SecurityGroupIds:
#        - !Ref InstanceSecurityGroup
#      SecurityGroups:
#        - !Ref InstanceSecurityGroup
#      SecurityGroupIds:
#        - Fn::GetAtt:
#            - InstanceSecurityGroup
#            - GroupId
#      SubnetId: !Ref encoderSubnet
      NetworkInterfaces:
        - SubnetId:
            Ref: 'encoderSubnet'
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - Ref: 'InstanceSecurityGroup'

  crafterInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: EC2ImageIdParam
      InstanceType:
        Ref: EC2InstanceTypeParam
#      SecurityGroupIds:
#        - !Ref InstanceSecurityGroup
#      SecurityGroups:
#        - !Ref InstanceSecurityGroup
#      SecurityGroupIds:
#        - Fn::GetAtt:
#            - InstanceSecurityGroup
#            - GroupId
#      SubnetId: !Ref crafterSubnet
      NetworkInterfaces:
        - SubnetId:
            Ref: 'crafterSubnet'
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - Ref: 'InstanceSecurityGroup'

  indexerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: EC2ImageIdParam
      InstanceType:
        Ref: EC2InstanceTypeParam
#      SecurityGroupIds:
#        - !Ref InstanceSecurityGroup
#      SecurityGroups:
#        - !Ref InstanceSecurityGroup
#      SecurityGroupIds:
#        - Fn::GetAtt:
#            - InstanceSecurityGroup
#            - GroupId
#      SubnetId: !Ref indexerSubnet
      NetworkInterfaces:
        - SubnetId:
            Ref: 'indexerSubnet'
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - Ref: 'InstanceSecurityGroup'

  rankerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: EC2ImageIdParam
      InstanceType:
        Ref: EC2InstanceTypeParam
#      SecurityGroupIds:
#        - !Ref InstanceSecurityGroup
#      SecurityGroups:
#        - !Ref InstanceSecurityGroup
#      SecurityGroupIds:
#        - Fn::GetAtt:
#            - InstanceSecurityGroup
#            - GroupId
#      SubnetId: !Ref rankerSubnet
      NetworkInterfaces:
        - SubnetId:
            Ref: 'rankerSubnet'
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - Ref: 'InstanceSecurityGroup'

  flowInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: EC2ImageIdParam
      InstanceType:
        Ref: EC2InstanceTypeParam
#      SecurityGroupIds:
#        - !Ref InstanceSecurityGroup
#      SecurityGroups:
#        - !Ref InstanceSecurityGroup
#      SecurityGroupIds:
#        - Fn::GetAtt:
#            - InstanceSecurityGroup
#            - GroupId
#      SubnetId: !Ref flowSubnet   #eg. usage SubnetId: subnet-abc01234
      NetworkInterfaces:
        - SubnetId:
            Ref: 'flowSubnet'
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - Ref: 'InstanceSecurityGroup'
#      SecurityGroupIds:
#      - !GetAtt daemonVPC.DefaultSecurityGroup #eg. usage

  FlowEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref flowInstance

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref flowInstance
      EIP: FlowEIP

